plugins {
  id 'org.springframework.boot' version '3.3.4'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'java'
  id 'jacoco'
  id 'checkstyle'
  id 'war'
  id 'org.sonarqube' version '5.0.0.4638'
  id "org.owasp.dependencycheck" version "6.1.2"
}

group = 'uk.co.fivium'
version = System.getenv("DRONE_BRANCH") ? System.getenv("DRONE_BRANCH").replaceAll("[/\\-]", "_") : "LOCAL-SNAPSHOT"
sourceCompatibility = '21'

tasks {
  bootJar {
    archiveFileName.set("${rootProject.name}.jar")
  }
}

repositories {
  mavenCentral()
  maven {
    url "https://nexus.fivium.co.uk/repository/maven-releases/"
  }
  maven {
    url "https://nexus.fivium.co.uk/repository/maven-snapshots/"
  }
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }
}

dependencies {

  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

  implementation 'org.springframework.boot:spring-boot-starter'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-freemarker'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation ('org.springframework.boot:spring-boot-starter-quartz') {
    exclude group: 'com.zaxxer', module: 'HikariCP-java7'
    // workaround for https://github.com/spring-projects/spring-boot/issues/16489
  }
  implementation 'io.micrometer:micrometer-registry-statsd'

  // Hibernate 6.5 introduced a performance issue with certain Oracle queries, see https://hibernate.atlassian.net/browse/HHH-18352.
  // This was fixed in a 6.5.3 snapshot but development moved over to 6.6.0 before a final 6.5.3 was released.
  // The upcoming spring-data-jpa 3.4.x will use Hibernate 6.6 https://github.com/spring-projects/spring-data-jpa/issues/3574, until then we
  // use a pinned 6.5.3 snapshot which has passed all the Hibernate CI tests, and which we have tested internally.
  implementation 'org.hibernate.orm:hibernate-core:6.5.3-20240807.164253-67'
  implementation 'org.flywaydb:flyway-core:9.5.1-FIVIUM'
  implementation 'com.oracle.database.jdbc:ojdbc11:21.9.0.0'
  implementation 'org.springframework.session:spring-session-jdbc'
  implementation 'uk.gov.service.notify:notifications-java-client:5.1.0-RELEASE'
  implementation('uk.co.fivium.feedbackmanagementservice:client:2.1.1')

  implementation 'com.google.guava:guava:33.2.1-jre'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation('commons-validator:commons-validator:1.7') {
    // Exclude commons-logging to fix "Standard Commons Logging discovery in action with spring-jcl: please remove
    // commons-logging.jar from classpath in order to avoid potential conflicts" warning on startup.
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  implementation group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.12.8'
  implementation group: 'fi.solita.clamav', name: 'clamav-client', version: '1.0.1'
  implementation 'software.amazon.awssdk:s3:2.28.13'
  implementation 'net.javacrumbs.shedlock:shedlock-spring:5.16.0'
  implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:5.16.0'

  annotationProcessor("org.hibernate.orm:hibernate-jpamodelgen")
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

  testImplementation(
      'com.h2database:h2:2.2.224',
      'org.springframework.boot:spring-boot-starter-test',
      'org.springframework.security:spring-security-test',
      'com.squareup.okhttp3:mockwebserver:4.9.1',
      'com.squareup.okhttp3:okhttp:4.9.1', // Required otherwise MockWebServer gives ClassNotFoundException
      'org.junit.vintage:junit-vintage-engine'
  )
}

test {
  useJUnitPlatform()
}

checkstyle {
  config = rootProject.resources.text.fromFile('ide/checkstyle.xml')
  toolVersion '10.18.1'
  ignoreFailures = false
  maxWarnings = 0
}

tasks.jacocoTestReport {
  reports {
    xml.required = true
  }
}

dependencyCheck {
  data {
    // Point to a persisted volume in drone, to avoid having to re-download the whole CVE database each run.
    // Comment this out to run locally
    directory='/var/nvd-db'
  }
}

sonarqube {
  properties {
    property 'sonar.projectKey', "Fivium_energy-pathfinder"
    property 'sonar.organization', 'fivium-gh'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.login', System.getenv('SONARCLOUD_TOKEN')
    property("sonar.exclusions", "src/test/**, src/main/resources/public/assets/**, fivium-design-system-core/**, src/main/resources/templates/fds/**, build/**")
    property("sonar.sources", "src")

    if (System.getenv('DRONE_PULL_REQUEST') != null) {
      property 'sonar.pullrequest.key', System.getenv('DRONE_PULL_REQUEST')
      property 'sonar.pullrequest.base', System.getenv('DRONE_TARGET_BRANCH')
      property 'sonar.pullrequest.branch', System.getenv('DRONE_SOURCE_BRANCH')
      property 'sonar.pullrequest.provider', 'github'
      property 'sonar.pullrequest.github.repository', 'energy-pathfinder'
      property 'sonar.pullrequest.github.endpoint', 'https://api.github.com/'
    } else {
      property 'sonar.branch.name', System.getenv('DRONE_BRANCH')
      if (System.getenv('DRONE_BRANCH') != 'develop') {
        property 'sonar.branch.target', 'develop'
      }
      property 'sonar.coverage.jacoco.xmlReportPaths', "${layout.buildDirectory}/reports/jacoco/test/jacocoTestReport.xml"
    }
  }
}
