import {faker} from "@faker-js/faker";
import {LoginPage} from "./page-objects/login.page"
import {FdsButton} from "../test-library/page-objects/components/FdsButton";
import {FdsLink} from "../test-library/page-objects/components/FdsLink";
import {FdsRadio} from "../test-library/page-objects/components/FdsRadio";
import {FdsTextInput} from "../test-library/page-objects/components/FdsTextInput.ts";
import {FdsTextarea} from "../test-library/page-objects/components/FdsTextarea.ts";
import {FdsSearchSelector} from "../test-library/page-objects/components/FdsSearchSelector.ts";
import {FdsSelect} from "../test-library/page-objects/components/FdsSelect.ts";
import {ProjectInformationPage} from "./page-objects/projectInformation.page.ts";
import {SubmitSuccessPage} from "./page-objects/submitSuccess.page.ts";
import {PageUtils} from "./page-objects/pageUtils.ts";
import {ManageProjectPage} from "./page-objects/manageProject.page.ts";

const loginPage = new LoginPage();
const pageUtils = new PageUtils();
const submitterEmail = "submitter.e2e@pathfinder.co.uk";
const nstaAdministrator = "administrator@pathfinder.co.uk"
const password = "dev";

const SHARED_STORE_PROJECT_TITLE = faker.string.alphanumeric(10);
const submitSuccessPage = new SubmitSuccessPage();
const manageProjectPage = new ManageProjectPage();

describe('Submit, publish and update project', () => {
    it('should log in as submitter and create, review and submit a new project', async () => {
        await loginPage.open();
        await loginPage.login(submitterEmail, password);
        await expect(browser).toHaveTitle(expect.stringContaining('Work area - Energy Pathfinder'));
        await FdsButton.clickButtonWithText("Create project");
        await FdsButton.clickButtonWithPartialText("Start project");
        await FdsLink.clickLinkWithText("Project operator/developer");
        await FdsSearchSelector.searchAndSelectOption("Who is the operator/developer for the project?", "AUTOMATED TEST ORGANISATION GROUP");
        await FdsRadio.selectRadioItemWithText("Is this the operator/developer you want shown on the NSTA supply chain interface?", "Yes");
        await FdsButton.clickButtonWithText("Save and continue");
        await FdsLink.clickLinkWithText("Project information & contact details");
        const projectInformation = new ProjectInformationPage();
        await projectInformation.enterProjectTitle(`Automation Test Project Number: ${SHARED_STORE_PROJECT_TITLE}`);
        await FdsTextarea.enterTextWithLabel("Provide a summary of the project", "Summary text of Automation Test Project");
        await FdsRadio.selectRadioItemWithText("What is the energy project?", "Discovery");
        await FdsTextInput.enterTextWithLabel("Name", "Automation Tester");
        await FdsTextInput.enterTextWithLabel("Telephone number", "+441234567890");
        await FdsTextInput.enterTextWithLabel("Job title", "Automation Tester");
        await FdsTextInput.enterTextWithLabel("Email address", "automation.tester@fivium.co.uk");
        await FdsButton.clickButtonWithText("Save and complete");
        await FdsLink.clickLinkWithText("Location");
        await FdsSearchSelector.searchAndSelectOption("Which field is the project related to?", "E2E Test Field");
        await FdsSelect.selectItemWithText("Field type", "Oil");
        await FdsTextInput.enterTextWithLabel("What is the maximum water depth?", "20");
        await FdsRadio.selectRadioItemWithText("Do you have an approved Field Development Plan (FDP)?", "No");
        await FdsRadio.selectRadioItemWithText("Do you have an approved Decommissioning Programme (DP)?", "No");
        await FdsButton.clickButtonWithText("Save and complete");
        await FdsLink.clickLinkWithText("Set up your project");
        await FdsRadio.selectRadioItemWithText("Do you want to allow other organisation to contribute to this project?", "No");
        await FdsRadio.selectRadioItemWithText("Do you have any upcoming tenders on this project?", "No");
        await FdsRadio.selectRadioItemWithText("Do you have any awarded contracts on this project?", "No");
        await FdsRadio.selectRadioItemWithText("Do you have any collaboration opportunities on this project?", "No");
        await FdsRadio.selectRadioItemWithText("Are you willing to combine your work with other operators/developers or the Supply Chain to form a campaign?", "No");
        await FdsRadio.selectRadioItemWithText("Are wells being commissioned on this project?", "No");
        await FdsButton.clickButtonWithText("Save and complete");
        await FdsLink.clickLinkWithText("Review and submit");
        await FdsButton.clickButtonWithText("Submit");
        const successMessage = await submitSuccessPage.getPageTitle();
        await expect(successMessage).toEqual("Project submitted");
        const projectTitle = await submitSuccessPage.getProjectTitle();
        await browser.sharedStore.set(SHARED_STORE_PROJECT_TITLE, projectTitle);
        await FdsLink.clickLinkWithText("Work area");
        await FdsLink.clickLinkWithText(projectTitle);
        const projectHeading = await submitSuccessPage.getPageTitle();
        await expect(projectHeading).toContain(projectTitle);
        await pageUtils.signOut();
    });
    it('should log in as a project administrator from the regulator team and publish without update', async () => {
        await loginPage.open();
        await loginPage.login(nstaAdministrator, password);
        await expect(browser).toHaveTitle(expect.stringContaining('Work area - Energy Pathfinder'));
        await FdsLink.clickLinkWithPartialText(SHARED_STORE_PROJECT_TITLE);
        const postSubmissionProjectStatus = await manageProjectPage.getProjectStatus();
        await expect(postSubmissionProjectStatus).toContain("QA");
        await FdsButton.clickButtonWithText("Provide assessment");
        await FdsRadio.selectRadioItemWithText("Is the project ready to be published?", "Yes");
        await FdsRadio.selectRadioItemWithText("Does this project require an update?", "No");
        await FdsButton.clickButtonWithText("Save and complete");
        const postPublishProjectStatus = await manageProjectPage.getProjectStatus();
        await expect(postPublishProjectStatus).toContain("Published");
        await pageUtils.signOut();
     });
    it('should log in as submitter and update project', async () => {
        await loginPage.open();
        await loginPage.login(submitterEmail, password);
        await expect(browser).toHaveTitle(expect.stringContaining('Work area - Energy Pathfinder'));
        await FdsLink.clickLinkWithPartialText(SHARED_STORE_PROJECT_TITLE);
        const projectStatus1 = await manageProjectPage.getProjectStatus();
        await expect(projectStatus1).toContain("Published");
        await FdsButton.clickButtonWithText("Provide update");
        await FdsButton.clickButtonWithPartialText("Start update");
        await FdsLink.clickLinkWithText("Set up your project");
        await FdsRadio.selectRadioItemWithText("Do you want to allow other organisation to contribute to this project?", "Yes");
        await FdsButton.clickButtonWithText("Save and complete");
        await FdsLink.clickLinkWithText("Project contributors");
        await FdsSearchSelector.searchAndSelectOption("Add an organisation that can contribute to this project", "TEST ORGANISATION");
        await FdsButton.clickButtonWithText("Save and complete");
        await FdsLink.clickLinkWithText("Review and submit");
        await FdsButton.clickButtonWithText("Submit");
        const successMessage = await submitSuccessPage.getPageTitle();
        await expect(successMessage).toEqual("Project update submitted");
        const projectTitle = await submitSuccessPage.getProjectTitle();
        await browser.sharedStore.set(SHARED_STORE_PROJECT_TITLE, projectTitle);
        await FdsLink.clickLinkWithText("Work area");
        await FdsLink.clickLinkWithText(projectTitle);
        const projectHeading = await submitSuccessPage.getPageTitle();
        await expect(projectHeading).toContain(projectTitle);
        await pageUtils.signOut();
    });
});
